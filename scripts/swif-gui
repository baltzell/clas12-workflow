#!/usr/bin/env python3

# I do not understand tkinter imports ...
import tkinter
from tkinter import *
from tkinter import ttk
import tkinter.scrolledtext as scrolledtext
import tkinter.messagebox as messagebox

class TabFrame(ttk.Frame):

    def __init__(self, name, notebook):
        super().__init__(notebook, padding='10 10 20 0')
        self.notebook = notebook
        self.notebook.add(self, text=name)
        self.notebook.hide(self)
        self.search_text = tkinter.StringVar()
        self.search_entry = tkinter.Entry(self, textvariable=self.search_text)
        self.search_entry.pack(side='top', fill='x')
        self.search_entry.bind('<Return>', self.search)
        self.text = scrolledtext.ScrolledText(self, undo=True)
        self.text.pack(side='bottom',fill='both',expand=True)
        self.text.tags = {}

    def update(self, text):
        self.text.configure(state='normal')
        self.text.delete(1.0)
        self.text.insert(1.0, text)
        self.text.configure(state='disabled')
        self.notebook.select(self)

    def search(self, event=None, pattern=None):
        if pattern is None:
            pattern = self.search_entry.get()
        if pattern in self.text.tags:
            start = self.text.tags[pattern][-1] + 1.0
        else:
            start = 1.0
        try:
            i = float(self.text.search(pattern, start))
        except ValueError:
            return
        if pattern not in self.text.tags:
            self.text.tags[pattern] = []
        self.text.tags[pattern].append(i)
        self.text.tag_add('%s%d'%(pattern,len(self.text.tags[pattern])), i, i+1)
        self.text.tag_config('%s%d'%(pattern,len(self.text.tags[pattern])), background='yellow')
        self.text.see(i-1)

class Wokflow():

    def __init__(self, name, row):
        import collections
        self.name = name
        self.row = row
        self.header = None
        self.details = None
        self.guivars = collections.OrderedDict()
        for k in ['complete','jobs','undispatched','dispatched','dispatched_preparing','dispatched_pending','dispatched_running','dispatched_reaping','dispatched_other','problems','problem_types','create_ts','update_ts']:
            self.guivars[k] = StringVar()
            self.guivars[k].set('-')
        self.header_cmd = swifcmd(['status','-display','json','-workflow',self.name])
        self.details_cmd = swifcmd(['status','-jobs','-display','json','-workflow',self.name])
        self.delete_cmd = swifcmd(['cancel','-delete','-workflow',self.name])
        self.known_problem_types = set()
        self.tabs = {}
        self.tabs['full'] = TabFrame(name='Full: '+self.name, notebook=tab_control)
        self.tabs['problems'] = TabFrame(name='Problems: '+self.name, notebook=tab_control)
        self.tabs['logs'] = TabFrame(name='Logs: '+self.name, notebook=tab_control)
        ttk.Label(tab_summary, text=self.name, relief='groove', anchor='center').grid(column=0, row=self.row, padx=0, pady=0, sticky='nesw')
        for i,(k,v) in enumerate(self.guivars.items()):
            ttk.Label(tab_summary, textvar=v, relief='groove', anchor='center').grid(column=i+1, row=self.row, padx=0, pady=0, sticky='nesw')
        self.button = ttk.Menubutton(tab_summary, text='Options')
        self.button.grid(column=len(self.guivars.items())+2, row=self.row, padx=3, pady=1)
        self.button.menu = tkinter.Menu(self.button, tearoff=False)
        self.button['menu'] = self.button.menu
        self.button.menu.add_command(label='Full Details', command=self.show_full_details)
        self.button.menu.add_command(label='Delete Workflow', command=self._delete_workflow)
        self.button['state'] = 'disabled'

    def _disable(self, parent_task=None):
        self._reset(init='n/a')
        self.button['state'] = 'disabled'

    def _reset(self, init='-'):
        self.header = None
        self.details = None
        self.hide_tabs()
        for v in self.guivars.values():
            v.set(init)

    def hide_tabs(self):
        for v in self.tabs.values():
            tab_control.hide(v)

    def reload(self, parent_task=None):
        self.button['state'] = 'disabled'
        self._reset()
        self.load()

    def load(self, parent_task=None):
        self.button['state'] = 'disabled'
        status_message.set('Running '+' '.join(self.header_cmd)+' ...')
        executor.submit(self._import_header).add_done_callback(self._update_header)

    def retry(self, problem):
        self.button['state'] = 'disabled'
        cmd = swifcmd(['retry-jobs','-workflow',self.name,'-problems',problem])
        executor.submit(run_command, cmd).add_done_callback(self.load)

    def modify(self, problem, mods):
        self.button['state'] = 'disabled'
        cmd = swifcmd(['modify-jobs'])
        cmd.extend(mods)
        cmd.extend(['-workflow',self.name,'-problems',problem])
        executor.submit(run_command, cmd).add_done_callback(self.load)

    def show_full_details(self):
        self.button['state'] = 'disabled'
        if self.details is None:
            status_message.set('Running '+' '.join(self.details_cmd)+' ...')
            executor.submit(self._import_details).add_done_callback(self._show_full_details)
        else:
            self._show_full_details()

    def show_problem_details(self):
        self.button['state'] = 'disabled'
        if self.details is None:
            status_message.set('Running '+' '.join(self.details_cmd)+' ...')
            executor.submit(self._import_details).add_done_callback(self._show_problem_details)
        else:
            self._show_problem_details()

    def show_problem_logs(self):
        self.button['state'] = 'disabled'
        if self.details is None:
            status_message.set('Running '+' '.join(self.details_cmd)+' ...')
            executor.submit(self._import_details).add_done_callback(self._show_problem_logs)
        else:
            self._show_problem_logs()

    def _import_header(self):
        import json,subprocess
        self.header = json.loads(subprocess.check_output(self.header_cmd).decode('UTF-8')).pop()
        status_message.set('Idle')

    def _import_details(self):
        import json,subprocess
        self.details = json.loads(subprocess.check_output(self.details_cmd).decode('utf-8')).get('jobs')
        status_message.set('Idle')

    def _delete_menu_entry(self, label):
        try:
            self.button.menu.delete(self.button.menu.index(label))
        except TclError:
            pass

    def _delete_workflow(self):
        if messagebox.askyesno(title='Delete Workflow', message='Really delete workflow?\n\n%s\n\nThis is not reversible!'%self.name):
            self._disable()
            executor.submit(run_command, self.delete_cmd)

    def _regenerate_menu(self, parent_task=None):
        import functools
        for x in ['Problem Details','Problem Logs']:
            self._delete_menu_entry(x)
        for x in self.known_problem_types:
            for y in ['Retry: ','Add Memory: ','Add Time: ']:
                self._delete_menu_entry(y+x)
        problems = self.header.get('problem_types')
        if problems is not None and problems != 'None':
            self.button.menu.add_command(label='Problem Details', command=self.show_problem_details)
            self.button.menu.add_command(label='Problem Logs', command=self.show_problem_logs)
            for x in problems.split(','):
                self.known_problem_types.add(x)
                if len(x) > 0 and x != 'None':
                    self.button.menu.add_command(label='Retry: '+x, command=functools.partial(self.retry,x))
            for x in problems.split(','):
                if x == 'SLURM_OUT_OF_MEMORY':
                    self.button.menu.add_command(label='Add Memory: '+x, command=functools.partial(self.modify,x,['-ram','add','4gb']))
                elif x == 'SLURM_TIMEOUT':
                    self.button.menu.add_command(label='Add Time: '+x, command=functools.partial(self.modify,x,['-time','add','12h']))

    def _update_header(self, parent_task=None):
        import datetime
        for k,v in self.guivars.items():
            v.set(str(self.header.get(k)))
        self.guivars['update_ts'].set(datetime.datetime.fromtimestamp(int(self.header['update_ts'])/1000).strftime('%m/%d %H:%M:%S'))
        self.guivars['create_ts'].set(datetime.datetime.fromtimestamp(int(self.header['create_ts'])/1000).strftime('%m/%d %H:%M:%S'))
        self.guivars['problem_types'].set('\n'.join(str(self.header.get('problem_types')).split(',')))
        complete = self.header.get('succeeded') / self.header.get('jobs')
        self.guivars['complete'].set('%.2f%%'%(complete*100))
        self._regenerate_menu()
        self.button['state'] = 'normal'

    def _get_stats(self):
        ret = {}
        for job in self.details:
            if 'tags' in job and 'mode' in job['tags']:
                mode = job['tags']['mode']
                if mode not in ret:
                    ret[mode] = {'success':0,'total':0}
                ret[mode]['total'] += 1
                if 'job_status' in job and job['job_status'] == 'done':
                    ret[mode]['success'] += 1
        return ret

    def _show_full_details(self, parent_task=None):
        import json
        s = ''
        for k,v in self._get_stats().items():
            s += '\n%10s: %d/%d = %.3f%%'%(k,v['success'],v['total'],100*v['success']/v['total'])
        s += '\n\n'+json.dumps(self.details,indent=2,separators=(',',': '))
        self.tabs['full'].update(s)
        self.button['state'] = 'normal'

    def _show_problem_details(self, parent_task=None):
        import json
        self.tabs['problems'].update(json.dumps(list(self._get_problem_jobs()),indent=2,separators=(',',': ')))
        self.button['state'] = 'normal'

    def format_log_file(path):
        import os
        lines = []
        if os.path.isfile(path):
            with open(path) as f:
                for x in f.readlines():
                    lines.append(x.strip())
            lines.insert(0,'>'*120)
            lines.insert(0,'>>>>> '+path)
            lines.insert(0,'>'*120)
            lines.extend(['\n','\n'])
        return lines

    def _show_problem_logs(self, parent_task=None):
        lines = []
        for job in self._get_problem_jobs():
            for x in ['site_job_stderr','site_job_stdout']:
                if job.get(x) is not None:
                    lines.extend(Wokflow.format_log_file(job.get(x)))
        self.tabs['logs'].update('\n'.join(lines))
        self.button['state'] = 'normal'

    def _get_problem_jobs(self, parent_task=None):
        for job in self.details:
            if job.get('job_attempt_status') == 'problem':
                yield job

def initialize():
    global workflows,swif
    ttk.Label(tab_summary, text='Name').grid(column=0, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Complete').grid(column=1, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Jobs').grid(column=2, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Undispatched').grid(column=3, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Dispatched').grid(column=4, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Preparing').grid(column=5, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Pending').grid(column=6, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Running').grid(column=7, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Reaping').grid(column=8, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Other').grid(column=9, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Problems').grid(column=10, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Types').grid(column=11, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Create').grid(column=12, row=0, padx=5, pady=5)
    ttk.Label(tab_summary, text='Update').grid(column=13, row=0, padx=5, pady=5)
    workflows = {}
    cmd = swifcmd(['list','-display','json'])
    if args.a:
        cmd = swifcmd(['list','-archived','-display','json'])
    import json,subprocess
    for w in json.loads(subprocess.check_output(cmd).decode('UTF-8')):
        workflows[w['workflow_name']] = Wokflow(w['workflow_name'], len(workflows)+1)

def set_status(stat):
    print(stat)
    status_message.set(stat)

def reload(parent_task=None):
    disable_buttons()
    set_status('Reloading Workflows ...')
    build_tabs()
    set_status('Retrieving Workflows ....')
    executor.submit(initialize).add_done_callback(load)

def build_tabs(parent_task=None):
    global tab_control,tab_summary
    if 'tab_control' in globals():  tab_control.destroy()
    if 'tab_summary' in globals():  tab_summary.destroy()
    tab_control = ttk.Notebook(main_frame)
    tab_summary = ttk.Frame(tab_control)
    tab_control.add(tab_summary, text='Summary')
    tab_control.grid(column=0, row=0, sticky='nwes', columnspan=3)

def load(parent_task=None):
    set_status('Loading Workflows ...')
    for w in workflows.values():
        w.load()
    enable_buttons()
    set_status('Idle.')

def hide_tabs():
    for w in workflows.values():
        w.hide_tabs()

def disable_buttons():
    remove_button['state'] = 'disabled'
    reload_button['state'] = 'disabled'
    for w in workflows.values():
        w.button['state'] = 'disabled'
    root.update()

def enable_buttons():
    remove_button['state'] = 'normal'
    reload_button['state'] = 'normal'
    for w in workflows.values():
        w.button['state'] = 'normal'
    root.update()

def run_command(cmd):
    import subprocess
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, timeout=30)

def check(event=None):
    root.after(500, check)

def handler(event):
    root.destroy()

def swifcmd(extend):
    x = swif.copy()
    x.extend(extend)
    return x

def checkssh(user):
    import subprocess
    cmd = ['ssh','-o','NumberOfPasswordPrompts 0','-q',user+'@ifarm','true']
    p = subprocess.Popen(cmd)
    p.wait()
    return 0 == p.returncode

workflows = {}

import sys
import signal
import getpass
import argparse

cli = argparse.ArgumentParser()
cli.add_argument('-u',help='username (requires ssh key)',default=getpass.getuser())
cli.add_argument('-a',help='include archived workflows',default=False,action='store_true')
args = cli.parse_args(sys.argv[1:])

swif = ['swif2']
if args.u != getpass.getuser():
    if not checkssh(args.u):
        cli.error('Failed using ssh key to access '+args.u)
    swif = ['ssh','-q',args.u+'@ifarm','swif2']

signal.signal(signal.SIGINT, lambda x,y : print('terminal ^C') or handler(None))

root = tkinter.Tk()
root.title('swif gui (%s)'%args.u)
root.minsize(1351,620)
root.bind_all('<Control-c>',handler)
root.after(500, check)
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

main_frame = ttk.Frame(root, padding='10 10 20 0')
main_frame.columnconfigure(0, weight=10)
main_frame.rowconfigure(0, weight=10)
main_frame.grid(column=0, row=0, sticky='nesw')

build_tabs()

status_message = tkinter.StringVar()
status_message.set('Loading...')
status_bar = ttk.Label(main_frame, borderwidth=2, textvariable=status_message, anchor="w")
status_bar.grid(row=1, column=0, columnspan=10, padx=10, pady=2, sticky='nesw')

remove_button = ttk.Button(main_frame, text='Hide Tabs', command=hide_tabs)
remove_button.grid(row=1, column=1, pady=3)
remove_button['state'] = 'disabled'
reload_button = ttk.Button(main_frame, text='Reload', command=reload)
reload_button.grid(row=1, column=2, pady=3)
reload_button['state'] = 'disabled'

import concurrent.futures
with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
    set_status('Retrieving Workflows ....')
    executor.submit(initialize).add_done_callback(load)
    root.mainloop()

