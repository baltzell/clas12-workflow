#!/usr/bin/env python3

file_regex='.*clas[_A-Za-z]*_(\d+)\.evio\.(\d+)[-\d]*\.hipo'
dec_pattern='/mss/clas12/%s/production/decoded/%s/%.6d'
dec_version={'rg-a':'6b.2.0','rg-b':'6.5.6','rg-k':'6b.2.0'}

def find_recon(path):
    import os,glob
    r = int(os.path.basename(path)[:-5][-6:])
    d = os.path.dirname(path.strip('/')).split('/')
    d = '/'+'/'.join(d[:-2])+'/recon/%.6d'%r
    if not os.path.isdir(d):
        raise Exception('Could not find recon directory for '+path)
    g = glob.glob(d+'/*.hipo')
    if len(g) == 0:
        raise Exception('Could not find recon files for '+path)
    return g

def find_decoded(path):
    import os,re
    m = re.match(file_regex,os.path.basename(path))
    if m is None:
        raise Exception('File does not match regex '+path)
    r,f = m.group(1),m.group(2)
    d = dec_pattern%(args.r,dec_version[args.r],int(r))
    if not os.path.isdir(d):
        raise Exception('Could not find decoded directory for '+path)
    if not os.path.basename(path).startswith('rec_'):
        raise Exception('Unknown prefix for '+path)
    d += '/' + os.path.basename(path)[4:]
    if not os.path.isfile(d):
        raise Exception('Could not find decoded file for '+path)
    return d

def parse_paths(paths):
    for p in paths:
        if p.strip().startswith('/mss'):
            yield p.strip()
        else:
            for line in open(p.strip()):
                yield line.strip().split().pop(0)

import argparse
cli = argparse.ArgumentParser(description='Find the input files necessary to regenerate files on a tape.')
cli.add_argument('-r',choices=['a','b','k'],help='run group',required=True)
cli.add_argument('-t',choices=['rec','ana'],help='type of files to recover',required=True)
subcli = cli.add_subparsers(help='data source',dest='command',required=True)
tape = subcli.add_parser('tape', help='tape number')
disk = subcli.add_parser('disk', help='path on disk')
tape.add_argument('tape',help='tape number',type=int)
disk.add_argument('path',nargs='+',help='file containing list of /mss file paths')
args = cli.parse_args()
args.r = 'rg-' + args.r

if args.command == 'tape':
    import subprocess
    paths = subprocess.check_output(['jasmine','list-files','-tape',str(args.tape)])
    paths = [ x.split().pop(0) for x in paths.decode('utf-8').split('\n') ]
else:
    paths = list(parse_paths(args.path))

corrupt,decoded,recon = set(),set(),set()
for path in sorted(paths):
    if args.r not in path:
        continue
    if 'decoded' in path:
        raise Exception('Not ready for decoded file '+path)
    elif 'train' in path:
        for x in find_recon(path): recon.add(x)
    elif 'recon' in path:
        decoded.add(find_decoded(path))
    else:
        raise Exception('Unknown file type of '+path)
    corrupt.add(path)

if args.t == 'rec' and len(decoded)>0:
    print('\n'.join(sorted(decoded)))

if args.t == 'ana' and len(recon)>0:
    print('\n'.join(sorted(recon)))

